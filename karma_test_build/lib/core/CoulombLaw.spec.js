"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Geometric3_1 = require("../math/Geometric3");
var Unit_1 = require("../math/Unit");
var CoordType_1 = require("../model/CoordType");
var CoulombLaw_1 = require("./CoulombLaw");
var Sphere3_1 = require("../engine3D/Sphere3");
var COULOMB = Unit_1.Unit.COULOMB;
var KILOGRAM = Unit_1.Unit.KILOGRAM;
var METER = Unit_1.Unit.METER;
var SECOND = Unit_1.Unit.SECOND;
var MOTION = KILOGRAM.mul(METER).div(SECOND);
var NEWTON = MOTION.div(SECOND);
var k = Geometric3_1.Geometric3.scalar(9.0E9, NEWTON.mul(METER).mul(METER).div(COULOMB).div(COULOMB));
describe("CoulombLaw", function () {
    var body1 = new Sphere3_1.Sphere3();
    var body2 = new Sphere3_1.Sphere3();
    body1.Q = Geometric3_1.Geometric3.scalar(1.5E-9, COULOMB);
    body2.Q = Geometric3_1.Geometric3.scalar(-2.0E-9, COULOMB);
    body1.X = Geometric3_1.Geometric3.vector(-0.0075, 0, 0, METER);
    body2.X = Geometric3_1.Geometric3.vector(+0.0075, 0, 0, METER);
    var interaction = new CoulombLaw_1.CoulombLaw(body1, body2, k);
    var q1 = body1.Q.a;
    var q2 = body2.Q.a;
    var r = Math.abs(body1.X.x - body2.X.x);
    it("CoordType", function () {
        expect(CoordType_1.LOCAL).toBeDefined();
        expect(CoordType_1.WORLD).toBeDefined();
    });
    it("potentialEnergy", function () {
        var pe = interaction.potentialEnergy();
        expect(pe.a).toBe(k.a * q1 * q2 / r);
        expect(pe.uom.multiplier).toBe(1);
        expect(pe.uom.multiplier).toBe(1);
        expect(pe.uom.dimensions.M.numer).toBe(1);
        expect(pe.uom.dimensions.L.numer).toBe(2);
        expect(pe.uom.dimensions.T.numer).toBe(-2);
        expect(pe.uom.dimensions.Q.numer).toBe(0);
    });
    it("updateForces", function () {
        var forces = interaction.updateForces();
        var force1 = forces[0];
        var force2 = forces[1];
        expect(force1.F.x).toBe(-k.a * q1 * q2 / (r * r));
        expect(force1.F.y).toBe(0);
        expect(force1.F.z).toBe(0);
        expect(force1.F.uom.multiplier).toBe(1);
        expect(force1.F.uom.dimensions.M.numer).toBe(1);
        expect(force1.F.uom.dimensions.L.numer).toBe(1);
        expect(force1.F.uom.dimensions.T.numer).toBe(-2);
        expect(force1.F.uom.dimensions.Q.numer).toBe(0);
        expect(force1.F.toExponential()).toBe("1.2e-4*e1 N");
        expect(force2.F.x).toBe(+k.a * q1 * q2 / (r * r));
        expect(force2.F.y).toBe(0);
        expect(force2.F.z).toBe(0);
        expect(force2.F.uom.multiplier).toBe(1);
        expect(force2.F.uom.dimensions.M.numer).toBe(1);
        expect(force2.F.uom.dimensions.L.numer).toBe(1);
        expect(force2.F.uom.dimensions.T.numer).toBe(-2);
        expect(force2.F.uom.dimensions.Q.numer).toBe(0);
        expect(force2.F.toExponential()).toBe("-1.2e-4*e1 N");
    });
});
