"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Geometric3_1 = require("../math/Geometric3");
var Unit_1 = require("../math/Unit");
var GravitationLaw_1 = require("./GravitationLaw");
var Sphere3_1 = require("../engine3D/Sphere3");
var KILOGRAM = Unit_1.Unit.KILOGRAM;
var METER = Unit_1.Unit.METER;
var SECOND = Unit_1.Unit.SECOND;
var MOTION = KILOGRAM.mul(METER).div(SECOND);
var NEWTON = MOTION.div(SECOND);
var G = Geometric3_1.Geometric3.scalar(6.7E-11, NEWTON.mul(METER).mul(METER).div(KILOGRAM).div(KILOGRAM));
describe("GravitationLaw", function () {
    var body1 = new Sphere3_1.Sphere3();
    var body2 = new Sphere3_1.Sphere3();
    body1.M = Geometric3_1.Geometric3.scalar(3, KILOGRAM);
    body2.M = Geometric3_1.Geometric3.scalar(5, KILOGRAM);
    body1.X = Geometric3_1.Geometric3.vector(-1, 0, 0, METER);
    body2.X = Geometric3_1.Geometric3.vector(+1, 0, 0, METER);
    var gravity = new GravitationLaw_1.GravitationLaw(body1, body2, G);
    var m1 = body1.M.a;
    var m2 = body2.M.a;
    var r = Math.abs(body1.X.x - body2.X.x);
    it("potentialEnergy", function () {
        var pe = gravity.potentialEnergy();
        expect(pe.a).toBe(-G.a * m1 * m2 / r);
        expect(pe.uom.multiplier).toBe(1);
        expect(pe.uom.multiplier).toBe(1);
        expect(pe.uom.dimensions.M.numer).toBe(1);
        expect(pe.uom.dimensions.L.numer).toBe(2);
        expect(pe.uom.dimensions.T.numer).toBe(-2);
        expect(pe.uom.dimensions.Q.numer).toBe(0);
    });
    it("updateForces", function () {
        var forces = gravity.updateForces();
        var force1 = forces[0];
        var force2 = forces[1];
        expect(force1.F.x).toBe(+G.a * m1 * m2 / (r * r));
        expect(force1.F.y).toBe(0);
        expect(force1.F.z).toBe(0);
        expect(force1.F.uom.multiplier).toBe(1);
        expect(force1.F.uom.dimensions.M.numer).toBe(1);
        expect(force1.F.uom.dimensions.L.numer).toBe(1);
        expect(force1.F.uom.dimensions.T.numer).toBe(-2);
        expect(force1.F.uom.dimensions.Q.numer).toBe(0);
        expect(force2.F.x).toBe(-G.a * m1 * m2 / (r * r));
        expect(force2.F.y).toBe(0);
        expect(force2.F.z).toBe(0);
        expect(force2.F.uom.multiplier).toBe(1);
        expect(force2.F.uom.dimensions.M.numer).toBe(1);
        expect(force2.F.uom.dimensions.L.numer).toBe(1);
        expect(force2.F.uom.dimensions.T.numer).toBe(-2);
        expect(force2.F.uom.dimensions.Q.numer).toBe(0);
    });
});
